{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Pragam\npragma solidity ^0.8.0;\n\n// Import\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// Error Codes\nerror FundMe__NotOwner();\n\n// Interfaces, Libraries, Contracts\n\n/**\n * @title A contract for crowd funding\n * @author BZ\n * @notice This contract is to demo a sample funding contract\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n    // Type Declaration\n\n    //State Variables!\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n    address private immutable i_owner;\n    AggregatorV3Interface public s_priceFeed;\n\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    constructor(address s_priceFeedAddress) {\n        i_owner = address(msg.sender);\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice This function funds this contract\n     * @dev This implements price feeds as our library\n     */\n\n    function fund() public payable {\n        // $ 1 minimal\n        uint256 minimumUSD = 1**18;\n        require(\n            getConversionRate(msg.value) >= minimumUSD,\n            \"You need to spend more ETH!\"\n        );\n        s_addressToAmountFunded[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n        //what the ETH -> USD conversion rate\n    }\n\n    function getprice() public view returns (uint256) {\n        // AggregatorV3Interface s_priceFeed = AggregatorV3Interface(\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        // );\n        (, int256 answer, , , ) = s_priceFeed.latestRoundData();\n        return uint256(answer * 10000000000);\n        //310631035721\n    }\n\n    function getConversionRate(uint256 ethAmount)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 ethPrice = getprice();\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1000000000000000000;\n        return ethAmountInUsd;\n    }\n\n    function withdraw() public payable onlyOwner {\n        // only want the contract admin/ower\n        // require msg.sender = owner\n\n        payable(msg.sender).transfer(address(this).balance);\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        // payable(msg.sender).transfer(address(this).balance)\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n    }\n\n    //view /pure\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(address funder)\n        public\n        view\n        returns (uint256)\n    {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}